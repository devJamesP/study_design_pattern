[의존성 뒤집기 원칙에 위배되는 객체 지향 디자인 피하기]
1. 어떤 변수에도 구상 클래스에 대한 레퍼런스 객체를 저장하지 말기
: new 연산자를 통한 구상 클래스에 대한 레퍼런스 사용하게 되는 것인데
이 부분을 팩토리를 써서 구상 클래스에 대한 레퍼런스를 변수에 저장하는 일을 미리 방지
(kotlin에서는 일반적인 구상 클래스에 대한 레퍼런스 객체 생성을 방지하라는 의미)
2. 구상 클래스에서 유도된 클래스를 만들지 말기
: 유도된 클래스를 만들면 특정 구상 클래스에 의존하게 됨.

3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드 하지 말기
: 베이스 클래스에서 메소드를 정의할 때는 모든 서브 클래스에서 공유할 수 있는 것만 정의 할 것.

※ 그치만 해당 가이드라인을 100% 지키기는 어렵다
실례로 String 객체의 경우 그냥 직접 생성하지 않는가?
유연하게 적용하면 될것.! 그리고 String  클래스의 경우 거의 바뀌는 경우가 없기 때문에
만약 클래스가 바뀔 가능성이 있다면 팩토리 메소드 패턴 같은 기법을 써서 변경될 수 있는 부분을
캡슐화 할 것!!!!!!