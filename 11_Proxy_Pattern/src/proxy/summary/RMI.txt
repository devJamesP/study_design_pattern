RMI란? 자바의 원격 메소드 호출을 위한 것(Remote Method Invocation)

로컬과 서버의 힙에는 각각 클라이언트 객체와 서비스 객체가 있다.
그리고 서로 통신 할 수 있도록 도와주는 헬퍼 객체들이 있다. (socket 통신)
클라이언트 쪽에는 클라이언트 보조 객체, 서버 쪽에는 서비스 보조 객체가 있다.

클라이언트 보조 객체 : 서버에 연락을 취하고 메소드 호출에 대한 정보를 전달하고, 서버로부터 리턴되는 정보를 기다린다.
서비스 보조 객체(서버쪽) : 클라이언트 보조 객체로부터 요청을 받아들이고 호출에 대한 정보를 해석해서 진짜 서비스 객체에 있는 진짜 메소드를 호출한다.
따라서 서비스 객체 입장에서는 그 메소드 호출이 원격 클라이언트가 아닌 로컬 객체로부터 들어오는 셈이다.


그리고 나서는 다음과 같다.
서비스 보조 객체는 서비스로부터 리턴값을 받아서 잘 포장해서(Socket 출력 스트림을 통해서) 클라이언트 보조 객체에게 전송한다.
클라이언트 보조 객체에서는 그 정보를 해석해서 리턴값을 클라이언트 객체에게 리턴한다.


[메소드 호출 과정]
1. 클라이언트 객체에서 클라이언트 보조 객체의 doBigThing()을 호출
2. 클라이언트 보조 객체에서는 메소드 호출에 대한 정보(인자, 메소드 이름 등)를 잘 포장해서 네트워크를 통해 서비스 보조 객체한테 전달
3. 서비스 보조 객체에서는 클라이언트 보조 객체로부터 받은 정보를 해석해서
어떤 객체의 어떤 메소드를 호출할 지 알아낸 다음 진짜 서비스 객체의 진짜 메소드를 호출
4. 서비스 객체의 메소드가 호출되고, 메소드 실행이 끝나면 서비스 보조 객체에 어떤 결과가 리턴
5. 서비스 보조 객체에서 호출 결과로 리턴된 정보를 포함해서 네트워크를 통해 클라이언트 보조 객체한테 전달
6. 클라이언트 보조 객체에서 리턴된 값을 해석하여 클라이언트 객체한테 리턴함.
클라이언트 객체 입장에서는 메소드 호출이 어디로 전달되었었는지, 어디에서 왔는지 전혀 알 수 없음

[RMI 개요]
RMI에서는 우리 대신 클라이언트와 서비스 보조 객체를 만들어 준다. 보조 객체에는 원격 서비스와 똑같은 메소드가 들어있다.
RMI를 이용하면 우리가 직접 네트워킹 및 입출력 관련 코드를 직접 작성하지 않아도 된다. 클라이언트에서는 그냥
그 클라이언트랑 같은 로컬 JVM에 있는 메소드를 호출하듯이 원격 메소드(진짜 서비스 객체에 있는 메소드)를 호출 할 수 있다.

또한 클라이언트에서 원격 객체를 찾아서 그 원격 객체에 접근하기 위해 쓸 수 있는 룩업(lookup) 서비스와 같은 것도 RMI에서 제공해 준다.
RMI 호출과 일반적인 로컬 메소드 호출의 차이점도 있다.
클라이언트 입장에서는 로컬 메소드 호출과 똑같은 식으로 메소드를 호출하면 되지만 실제로 클라이언트 보조 객체에서
네트워크를 통해서 호출을 전송한다는 점이다.

RMI 용어 : RMI에서 클라이언트 보조 객체는 스터브(stub), 서비스 보조 객체는 스켈레톤(skeleton)이라고 부른다.
