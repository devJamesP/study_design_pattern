[프록시 패턴]
: 어떤 객체에 대한 접근을 제어하기 위한 용도로 대리인이나 대변인에 해당하는 객체를 제공하는 패턴

프록시는 어떤것일까?
쉽게 말해 외부에 있는 객체에 직접적으로 접근 할 수 없기에 대리인(프록시)을 내세워서
외부 대리인(프록시)이 원격 객체에 대한 접근을 가지고 있으니 네트워크 관련 사항들을
내부 프록시에게 전달해줌으로써 우리는 원격 객체에 접근한 것과 같은 효과를 얻을 수 있다.

프록시 패턴에는 다양한 변종이 존재한다.
그리고 그러한 프록시 패턴은 "접근을 제어"하는 방법 면에서 차이점을 보인다.

[일부 패턴 종류]
- 원격 프록시를 써서 원격 객체에 대한 접근을 제어할 수 있다.
- 가상 프록시(virtual proxy)를 써서 생성하기 힘든 자원에 대한 접근을 제어할 수 있다.
- 보호 프록시(protection proxy)를 써서 접근 권한이 필요한 자원에 대한 접근을 제어할 수 있다.

[원격 프록시 패턴]
원격 프록시는 다른 JVM에 있는 객체의 대변인에 해당하는 로컬 객체이다.
프록시의 메소드를 호출하면 그 호출이 네트워크를 통해 전달되어 격국 원격 객체의 메소드가 호출된다.
그리고 그 결과는 다시 프록시를 거쳐서 클라이언트한테 전달된다.

[가상 프록시 패턴]
가상 프록시는 생성하는 데 많은 비용이 드는 객체를 대신하는 역할을 맡는다.
실제로 진짜 객체가 필요하게 되기 전까지 객체의 생성을 미루게 해 주는 기능을 제공한다.
객체 생성 전, 또는 객체 생성 도중에 객체를 대신하기도 한다.
객체 생성이 완료되고 나면 그냥 RealSubject에 요청을 직접 전달 해준다.
(진짜 객체가 필요하게 되면 프록시에서 그 객체를 생성함!!, 프록시에서 일부 요청을 직접 처리할 수도 있지만,
RealSubject가 생성되어 있는 상태에서는 바로 RealSubject에 그 호출을 넘겨 준다.)
