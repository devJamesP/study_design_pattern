[객체지향 원칙]
* 바뀌는 부분을 캡슐화한다.
* 상속보다는 구상을 활용한다.
* 구현이 아닌 인터페이스에 맞춰서 프로그래밍 한다.
* 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야 한다.
* 클래스는 확장에 대해서는 열려 있지만 변경에 대해서는 닫혀 있어야 한다.(OCP)
* 추상화된 것에 의존하라. 구상 클래스에 의존하지 않도록 한다.
* 친한 친구들하고만 연락하라
* 먼저 연락 하지 마라. 이쪽에서 연락하겠다.
* 어떤 클래스가 바뀌게 되는 이유는 한 가지 뿐이어야 한다.

[컴파운드 패턴]
두 개 이상의 패턴을 결합하여 일반적으로 자주 등장하는 문제들에 대한 해법을 제공한다.