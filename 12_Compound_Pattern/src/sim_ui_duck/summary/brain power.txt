[1]
Duck을 집어넣을 수 있는 곳이라면 어디든지 Goose도 집어넣을 수 있으야 한다고 가정해 보자.
사실 거위들도 소리를 내고 날기도 하고 헤엄도 치는데 시뮬레이터에 집어넣지 못할 이유가 없다!!
어떤 패턴을 활용하면 거위들이 오리들하고 잘 어울려 놀 수 있을까??
: 어댑터 패턴 - 어댑터 패턴을 이용해서 거위 어댑터가 quackable 인터페이스를 구현하여 인자로 거위를 받는다.

[2]
학자들은 Quackable의 행동에 매료되어 있다. 학자들이 오래전부터 염원해왔던 것 가운데 ㅎ나로 오리떼가 있을 때,
그 오리떼가 낸 꽥소리의 총 회수에대한 연구를 들 수 있다. 오리 클래스는 그대로 두면서 오리가 꽥 소리를 낸 회수를
세려면 어떻게 해야 할까? 어떤 패턴을 쓰면 이 문제를 해결할 수 있을까?
: 데코레이터 패턴 - quackable을 구현한 카운터 클래스에 전역변수로 카운트변수를 생성하고 quack메소드가 호출 될 때마다
카운트를 증가시킨다.

[3]
데코레이터를 쓸 때 객체를 잘 포장하지 않으면 원하는 행동을 추가할 수 없다.
따라서 객체 생성은 한곳에서 하고 데코레이터는 따로 모아서 하려면?
: 팩토리 패턴 - 팩토리 패턴을 사용해 객체 생성을 한쪽에서 작업하게 한다.

[4]
조금 나아지기는 했지만 여전히 거위를 만들 때는 구상 클래스에 의존하게 된다.
이부분은 추상 팩토리를 만들어서 "거위 오리"를 만드는 작업은 어떻게 처리해야 할까?
: 추상 팩토리 클래스를 만들어서 그안에서 거위를 생성하여 adapter로 감싸면 오리처럼 다룰 수 있다.
이를 오리 팩토리 클래스에서 gooseDuck을 리턴하는 메소드를 추가해준다.

[5]
오리를 관리하는 기능의 요구가 들어왔다. 그런데 현재 오리들을 한마리씩 관리하는데 이를
한꺼번에 같은 작업을 적용할 수 있다면 어떤 패턴을 써야 할까?
: 컴포지트 패턴 - 부분 - 전체 구조를 같은 작업으로 전체를 처리한다!