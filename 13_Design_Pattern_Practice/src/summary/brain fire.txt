컨텍스트, 제약조건, 포스, 카탈로그, 분류 등 여러가지 개념에 대해서 알아봤는데
그렇다면 어떤 디자인이 좋은 디자인일까? 어떻게 생각해야 할까?

1. 최대한 단순하게(kiss = keep it simple)
개발을 할 때 어떤 패턴을 적용할까 라는 접근법 보다는 어떻게 해야 단순하게 개발 할 수 있을까?를
고민해야 한다. 가장 단순하고 유연한 디자인을 만들기 위해서 패턴을 사용해야 한다면
그때 패턴을 적용하면 되는 것이다!

2. 디자인 패턴은 만병 통치약이 아니다.
패턴은 반복적으로 발생하는 문제에 대한 일반적인 해결책이다.
그리고 수 많은 개발자들에 의해서 오랫동안 검증받은 해결책이라는 장점도 있다.
그치만 만병 통치약은 아니다. 그냥 패턴을 집어넣고 컴파일한다고 해서 기적 같이 문제가 해결되지는 않는다.
패턴을 사용할 떄는 그 패턴을 사용했을 때 설계한 디자인의 다른 부분에 미칠 수 있는 영향과 결과에 대해 주의 깊게 봐야한다.

3. 패턴이 필요한 경우는 다음과 같다.
- 디자인을 할 때, 지금 디자인상의 문제에 적합하다는 확신이 들 때.
만약 단순한 해결책이 존재한다면 그 해결책을 쓰는게 좋지만 그것만으로는 부족하다면
여러가지 제약 조건을 고려하여 사용한다.
- 시스템의 어떤 부분이 변경될 것이라고 예측할 수 있는 경우 간단한 문제라도 패턴으로 해결하는게 필요한
경우가 있다. 단, 변경에 대비해서 패턴을 적용해야지, 그리 가능성이 높지 않은 가상적인 변겨엥 대비해서 패턴을 적용하는 것은
바람직하지 않다.
- 패턴은 리펙터링을 할 때도 도입을 고려해보아도 좋다.

4. 리펙터링과 패턴
리펙터리(refactoring)이란 코드 구조를 개선하기 위해서 코드를 변경하는 과정을 뜻한다.
리펙터링의 목적은 행동을 변경하는 것이 아니라 구조를 개선하는 데 있다.
예를 들어 조건문이 아주 많이 있는 코드가 있으면 스테이트 패턴을 적용하는 것을 고려해 볼 만 하다.
팩토리 패턴을 써서 구상클래스에 대한 의존성을 말끔하게 정리하는 것도 좋을 수 있다.

5. 꼭 필요하지 않은 것은 빼버리자
언제 패턴을 제거해야 할까? 시스템이 점점 복잡해지면서 처음에 기대했던 유연성이 전혀 발휘하지 않게 되는 경우
패턴을 과감하게 제거해 버리는 게 낫다. 즉, 패턴을 사용하지 않은 간단한 해결책이
더 나올 것 같다 싶을 때 패턴을 제거해 버리면 된다.

6. 꼭 필요하지 않은 것을 미리 할 필요는 없다.
어떤 개발자든 어떤 식의 변화에도 흘륭하게 대처할 수 있는 아름다운 아키텍처를 만들고 싶은 마임이 들 것이다.
하지만 이런 유혹을 이겨내야 한다. 지금 당장 변화에 대처하기 위한 디자인을 만들어야 한다면
패턴을 적용해서 그 변화에 적응해야 한다. 하지만 꼭 필요하지 않음에도 불구하고 괜히 패턴을 추가하는 것은 피해야 한다.