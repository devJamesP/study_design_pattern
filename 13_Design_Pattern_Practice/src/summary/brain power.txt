[1]
디자인 패턴의 정의에 따라 문제, 컨텍스트, 그리고 (실제로 통할 수 있는) 해결책을 정의했다.
이것을 패턴이라고 할 수 있을까? 패턴이라고 할 수 없다면 그 이유는 무엇일까? 객체지향 디자인 패턴을
정의할 때도 이런 일이 생길 수 있을까?
답 : 상황에 따라 패턴이라고 보기 어려울 수 있다.
패턴이라고 하면 특정 컨텍스트에서 반복적이고 유사한 상황(문제)에서 적용 할 수 있는 해결책이라고 생각한다.
만일 특수한 상황에서만 사용되는 해결책이라면 패턴이라고 보기 어렵지 않을까?
그리고 디자인 패턴 정의시에는 이런 일이 생길 수 있다.
기본적인 패턴을 적절히 적용하지 못하여 변경에 대해서 매번 새로운 솔루션을 적용해야 한다면
이는 패턴이 적용되었다고 보기 어렵다고 생각한다.


좀더 자세히 보면
예를 들어
정신을 딴 데 팔다 보면 차 열쇠를 차 안에 두고 문을 잠그는 일이 생길 수도 있지만,
그런 상황에서 차 유리를 깨는 방법은 반복적으로 적용 할 수 있는 해결책이라고 할 수 없다.
혹시 그렇게 할 수 있다고 하더라도, 또 다른 제약조건이라고 할 수 있는 "비용" 문제 면에서
제약 조건을 벗어난다고 생각 할 수 있다.
또한 이런 해결책을 다른사람한테 알려주고 그 사람이 처한 문제에 대한 해결채긍로 적용하기 매우 힘들다.
그리고 간단하면서도 중요한 패턴의 특징을 위배했다는 점이다. 패턴에 이름을 붙이지 않았다는 것이다.
만약 이름이 없다면 다른 개발자들하고 그 패턴에 대해서 토론하는 것은 불가능하다.

따라서 패턴은 단순하게 문제, 컨텍스트, 해결책만 가지고 기술되거나 문서화되지 않는다.
패턴을 기술하고 패턴 카탈로그에 수록할 때 사용할 수 있는 훨씬 흘륭한 방법이 있다.
