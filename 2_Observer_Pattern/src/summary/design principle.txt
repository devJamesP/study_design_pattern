[디자인 원칙]
옵저버 패턴에서는 디자인 원칙들이 어떻게 작용할까?

1. 애플리케이션에서 바뀌는 부분을 찾아내서 바뀌지 않는 부분으로부터 분리시킨다.
: 옵저버 패턴으로 생성된 코드에서 주제의 상태가 바뀌게 되면 이를 종속된 객체에게 연락을 돌린다.
연락을 받으면 후속 조치를 취하는데 이 부분이 바로 바뀌는 부분이다.
따라서 바뀌는 부분에 대해 캡슐화를 하게 되면 주제의 변화가 감지됨에 따라 유연하게 객체의 상태를 바꿀 수 있다.

2. 특정 구현이 아닌, 인터페이스에 맞춰서 프로그래밍 한다.
: 주제가 Observable 클래스를 상속받기 때문에 유연성이 조금 떨어진다.
다만 Observe 객체는 인터페이스이며 update 메소드를 구현하게 함으로써
Observable를 상속받은 주제 객체가 바뀌게 되면 Observe 인터페이스를 구현한 객체들은 자동으로 update 메소드를 호출함으로
Observe 객체들을 관리하는데 유용하다.

3. 상속보다는 구성을 활용한다.
: 주제는 Observable을 상속하고, 이러한 주제를 Observe객체들이 구성함으로써
Observable를 상속한 주제가 바뀌더라도 이를 구성하고 있는 Observe객체들을 바꿀 필요가 없으므로
상당히 유연하고 편리하다.



답 :
1. 옵저버 패턴에서 변하는 것은 주제의 상태와 옵저버의 개수, 형식이다.
옵저버 패턴에서는 주제를 바꾸지 않고도 주제의 상태에 의존하는 객체들을 바꿀 수 있다. 나중에 바뀔 것에 대비해 두면
이렇게 편하게 작업 가능하다. (즉, 옵저버 객체가 주제 객체는 변할 필요가 없음.)

2. Subject와 Observer에서 모두 인터페이스를 사용했다. Subject에서는 Subject 인터페이스를 통해서
Observer 인터페이스를 구현하는 객체들의 등록/탈퇴를 관리하고, 그런 객체들한테 연락을 돌린다.
이러면 결합이 굉장히 느슨하다.

3. 옵저버 패턴에서는 구성을 활용하여, 옵저버들을 관리한다. 주제와 옵저버 사이의 관계는 상속이 아니라 구성이므로
게다가 실행중에 구성되는 방식을 사용하니까 더할 나위 없이 좋음.

