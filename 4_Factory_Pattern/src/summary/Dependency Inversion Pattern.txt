[의존성 디자인 원칙(Dependency Inversion Principle)]
+Design Principle
: 추상화된 것에 의존하도록 만들어라. 구상 클래스에 의존하도록 만들지 않도록 한다.

이 원칙은 '특정 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다'라는 원칙과 비슷하다고 생각되지만
의존성 뒤집기 원칙에서는 추상화를 더 많이 강조한다.
이 원칙에는 고수준 구성요소가 저수준 구성요소에 의존하면 안 된다는 것이 내포되어 있다.
항상 추상화에 의존하도록 만들어야 한다.

이 말은 피자가게 다이어그램을 살펴보면....
SimplePizzaStore는 '고수준 구성요소' 라고 할 수 있다. 피자 클래스들은 '저수준 구성요소' 라고 할 수 있다.
SimplePizzaStore 클래스는 구상 피자 클래스들에 의존하고 있다는 것을 확실하게 알 수 있다.
의존성 뒤집기 원칙에 의하면, 구상 클래스처럼 구체적인 것이 아닌 추상클래스나 인터페이스와 같이 추상적인 것에
의존하는 코드를 만들어야 한다.
이 원칙은 고수준 모듈과 저수준 모듈에 모두 적용 된다.

근대 왜 의존성 뒤집기 인가?
의존성의 방향이 아래를 향할 뿐 추상 클래스에 의존하도록 만드는것 같다.

즉, PizzaStore 추상 클래스가 이전에는 각각의 Pizza 추상 클래스를 구현한 피자 구상 클래스들에 의존했는데
구상 클래스들에 의존하는게 아닌 Pizza에 의존하게 함으로 써(val pizza: Pizza = createPizza(type))
이렇게 되면 각각의 구상 피자 클래스는 ↑, PizzaStore ↓ 방향으로 Pizza에 의존하게 됨.