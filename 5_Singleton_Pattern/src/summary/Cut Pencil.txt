[1]
초코홀릭에서 ChocolateBoiler 클래스를 싱글턴으로 업그레이드하려고 하는데, 추가해보자.
[Java]
public class ChocolateBoiler {
    private boolean empty;
    private boolean boiled;

    private static ChocolateBoiler uniqueChocolateBoiler;

    private ChocolateBoiler() {
        empty = ture;
        boiled = false;
    }

    public static ChocolateBoiler getInstance() {
        if (uniqueChocolateBoiler == null) {
            uniqueChocolateBoiler = new ChocolateBoiler()
        }
        return uniqueChocolateBoiler;
    }
}

[2]
초콜릿 보일러 코드를 고칠 때 각 해법을 어떤 식으로 적용할 수 있을지 적어보자.
1. getInstance() 메소드를 동기화하는 방법 :
public static synchronized ChocolateBoiler getInstance() {
    if (uniqueChocolateBoiler == null) {
        uniqueChocolateBoiler = new ChocolateBoiler();
    }
    return uniqueChocolateBoiler;
}
: 항상 올바른 결과가 나온다. 초콜릿 보일러의 경우에는 속도 문제가 그리 중요하지 않으므로 이 방법을 써도 된다.

2. 인스턴스를 시작하자마자 만드는 방법
public class ChocolateBoiler {
    ...

    private static ChocolateBoiler uniqueChocolateBoiler = new ChocolateBoiler();

    public ChocolateBoiler getInstance() {
        return uniqueChocolateBoiler;
    }

    ...
}
: 어차피 초콜릿 보일러의 인스턴스는 항상 필요하기 때문에 정적으로 초기화하는 것도 괜찮은 방법이다.
표준적인 패턴에 익숙한 개발자들에게는 좀 이상하게 보일 수도 있지만 지금 상황에서 위에 있는 동기화하는 방법이나
이 방법이나 그리 크게 차이가 나지 않을 것이다.

3. DCL(Double-Checking Locking)을 쓰는 방법
public static ChocolateBoiler getInstance() {
    if (uniqueChocolateBoiler == null) {
        synchronized(ChocolateBoiler.class) {
             uniqueChocolateBoiler = new ChocolateBoiler();
        }
    }
    return uniqueChocolateBoiler;
}
: 속도 문제가 그리 중요하지 않은 상황이기 때문에 굳이 DCL을 쓸 필요까지는 없을 듯하다.
그리고 반드시 자바 5 이상 버전에서만 쓸 수 있다는 점도 고려해야 한다.
