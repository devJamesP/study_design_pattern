[Brain Power]
커맨드 패턴 디자인을 사용했을 때 작업을 요구한 인보커와 작업을 처리하는 리시버가 어떤 식으로 분리되는 걸까?
: 리시버는 커맨드 인터페이스를 구현한 Concrete커맨드 객체가 구성하고 있고,
인보크의 setCommand()메소드를 통해 Concrete커맨드 객체를 setup하면 해당 커맨드로부터
리시버의 action을 실행 할 수 있다.(execute())
즉, 인보커와 리시버는 서로 독립적으로 존재한다.


[2]
커맨드 패턴을 활용하여 큐에 저장하고, 각 스레드에서 execute()메소드를 호출하고, 그 호출이 완료되면
커맨드 객체를 보내 버리고 새로운 커맨드 객체를 가져오는 형태로 패키지 할 수 있다.
이러면 다양한 용도에 적용 가능하다.
그렇다면!! 웹 서버에서라면 어떤 식으로 이런 큐를 활용 할 수 있을까?
답 : 사용자가 서버에 요청을 하면 해당 요청이 커맨드 형태의 객체로 생성, 전송 되고
그 서버에 알린다. 그러면 스레드에서 해당 객체를 처리하는 형태로 사용 할 수 있다.
다른 예로는 리시버의 종류와는 상관 없이 스레드에서 어떤 작업을 처리 할 때 리시버와 커맨드,
클라이언트가 완벽히 분리되어 아무곳에서나 사용 될 수 있다.

이러한 커맨드 패턴은 요청을 로그에 기록하는 방식으로 사용 될 수 있다.
가령 시스템이 다운되더라도 로그에 기록된 내용을 보고 다시 복구 가능하다.
이보다 더 복잡한 애플리케이션에서는 이런 테크닉을 확장해서 일련의 작업들에 대해서
트랜잭션을 활용하여 모든 작업이 완벽하게 처리되도록 하거나, 그렇지 않으면
아무 것도 처리되지 않게 롤백하도록 할 수 있다.